{"version":3,"file":"static/js/851.c1fa59fb.chunk.js","mappings":"8NACA,EAAyB,wB,SCEV,SAASA,EAAT,GACb,OADyC,EAATC,MACnBC,KAAI,YAA0C,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,WACvC,OACE,qBAASC,UAAWC,EAApB,WACE,wBAAKL,KACL,uBAAIG,KACJ,uBAAIF,MAHkCC,EAM3C,GACF,CCRc,SAASI,EAAYC,GAClC,IAAQC,GAAYC,EAAAA,EAAAA,IAAU,MAAtBD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KASA,OAPAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaN,GAASO,MAAK,SAAAjB,GACzB,IAAMkB,EAAOlB,EAAMkB,KAAKC,QACxBL,EAAWI,EACZ,GACF,GAAE,CAACR,IAEGG,EAAQO,OAAS,GACtB,SAAC,EAAD,CAASpB,MAAOa,KAEhB,sEAEH,C,oKCnBYQ,EAAO,SACZC,GACA,OAAOC,EAAAA,EAAAA,IAAUD,EACpB,ECCL,EANiB,CACbE,SAAU,+BACVC,QAAS,mCACTC,iBAAkB,SCAdF,EAAsBG,EAAAA,SAAZF,EAAYE,EAAAA,QAEjBC,EAAc,WAAe,IAAdC,EAAa,uDAAN,EACjC,OAAOR,EAAA,UACFG,EADE,uCACqCC,EADrC,iBACqDI,GAE7D,EAEYC,EAAuB,SAACC,GAA6B,IAAdF,EAAa,uDAAN,EACzD,OAAOR,EAAA,UACFG,EADE,iCAC+BC,EAD/B,iBAC+CI,EAD/C,kBAC6DE,GAErE,EAEYC,EAAkB,SAAAtB,GAC7B,OAAOW,EAAA,UAAYG,EAAZ,kBAA8Bd,EAA9B,oBAAiDe,GACzD,EAEYQ,EAAY,SAAAvB,GACvB,OAAOW,EAAA,UAAYG,EAAZ,kBAA8Bd,EAA9B,4BAAyDe,GACjE,EAEYT,EAAe,SAAAN,GAC1B,OAAOW,EAAA,UAAYG,EAAZ,kBAA8Bd,EAA9B,4BAAyDe,GACjE,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.jsx","pages/ReviewsPage/ReviewsPage.jsx","services/api.jsx","services/settings.jsx","services/fetchMovies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"coment\":\"Reviews_coment__ttw00\"};","import styles from '../Reviews/Reviews.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Reviews({ array }) {\n  return array.map(({ author, content, id, updated_at }) => {\n    return (\n      <article className={styles.coment} key={id}>\n        <h3>{author}</h3>\n        <b>{updated_at}</b>\n        <p>{content}</p>\n      </article>\n    );\n  });\n}\n\nReviews.propTypes = {\n  array: PropTypes.arrayOf(\n    PropTypes.shape({\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      updated_at: PropTypes.string.isRequired,\n    })\n  ),\n};","import { useParams } from \"react-router-dom\";\nimport { fetchReviews } from \"services/fetchMovies\";\nimport { useEffect, useState } from \"react\";\nimport Reviwes from 'components/Reviews/Reviews';\n\nexport default function ReviwesPage(params) {\n  const { movieId } = useParams(null);\n  const [reviews, setReviwes] = useState([]);\n\n  useEffect(() => {\n    fetchReviews(movieId).then(array => {\n      const data = array.data.results;\n      setReviwes(data);\n    });\n  }, [movieId]);\n\n  return reviews.length > 1 ? (\n    <Reviwes array={reviews} />\n  ) : (\n    <h3>Sorry, there are no reviews for this film.</h3>\n  );\n}","import axios from \"axios\";\n\nexport const http = {\n    get(url) {\n        return axios.get(url);\n    },\n    post(url, body) {\n        return axios.post(url, body);\n    },\n};","const settings = {\n    BASE_URL: 'https://api.themoviedb.org/3',\n    API_KEY: '06db4ee70b7b470346bb935e4264850a',\n    DEFAULT_LANGUAGE: 'en-US',\n};\n\nexport default settings;\n","import { http } from './api';\nimport apiSettings from './settings';\n\nconst { BASE_URL, API_KEY } = apiSettings;\n\nexport const fetchMovies = (page = 1) => {\n  return http.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`\n  );\n};\n\nexport const fetchMoviesByRequest = (searchRequest, page = 1) => {\n  return http.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&page=${page}&query=${searchRequest}`\n  );\n};\n\nexport const fetchMoviesById = movieId => {\n  return http.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\n};\n\nexport const fetchCast = movieId => {\n  return http.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n};\n\nexport const fetchReviews = movieId => {\n  return http.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\n};"],"names":["Reviews","array","map","author","content","id","updated_at","className","styles","ReviwesPage","params","movieId","useParams","useState","reviews","setReviwes","useEffect","fetchReviews","then","data","results","length","http","url","axios","BASE_URL","API_KEY","DEFAULT_LANGUAGE","apiSettings","fetchMovies","page","fetchMoviesByRequest","searchRequest","fetchMoviesById","fetchCast"],"sourceRoot":""}